document.addEventListener('DOMContentLoaded', () => {
    // --- DocuSign Generator Specific Elements ---
    const generatorForm = document.getElementById('docusign-generator-form');
    const generatePreviewBtn = document.getElementById('generate-preview-btn');
    const previewPanel = document.getElementById('preview-panel');
    const previewArea = document.getElementById('document-preview-area');
    const sendEmailBtn = document.getElementById('send-email-btn');
    const downloadPdfBtn = document.getElementById('download-pdf-btn'); // Get PDF button

    // --- Standard Legal Text ---
    const standardIntro = `
LEGAL SERVICES AGREEMENT

This Agreement ("Agreement") is entered into on [DATE], by and between The Kershaw Law Firm P.C., a professional corporation organized under the laws of [Your State] ("Attorney"), and [EMPLOYER_NAME] ("Client").

RECITALS

WHEREAS, Client desires to retain Attorney to provide legal services in connection with the preparation and filing of temporary work visa petitions under the immigration laws of the United States; and

WHEREAS, Attorney is licensed and qualified to provide such legal services;

NOW, THEREFORE, in consideration of the mutual covenants contained herein, the parties agree as follows:
`;

    const h2aClauses = `
1. SCOPE OF SERVICES (H-2A VISA)

Attorney agrees to perform the following legal services related to the H-2A Temporary Agricultural Worker program on behalf of Client:
    a. Provide legal counsel regarding H-2A program requirements, compliance obligations, and case strategy.
    b. Prepare and file the Application for Temporary Employment Certification (Form ETA-9142A and all necessary appendices) with the U.S. Department of Labor (DOL).
    c. Assist Client with required recruitment efforts as mandated by DOL regulations.
    d. Upon certification by DOL, prepare and file the H-2A Petition (Form I-129, Petition for a Nonimmigrant Worker, with H Classification Supplement) with U.S. Citizenship and Immigration Services (USCIS).
    e. Communicate with DOL and USCIS regarding the status of the applications/petitions and respond to requests for evidence (RFEs) if necessary (additional fees may apply for complex RFEs).
    f. Provide guidance on consular processing procedures for beneficiaries located abroad or change of status procedures for eligible beneficiaries within the United States.
    g. Provide general advice regarding record-keeping and compliance post-approval.
`;

    const h2bClauses = `
1. SCOPE OF SERVICES (H-2B VISA)

Attorney agrees to perform the following legal services related to the H-2B Temporary Non-Agricultural Worker program on behalf of Client:
    a. Provide legal counsel regarding H-2B program requirements, including establishing temporary need (e.g., seasonal, peakload, one-time occurrence, intermittent), recruitment obligations, and compliance.
    b. Prepare and file the Prevailing Wage Determination (PWD) request with the U.S. Department of Labor (DOL), if required.
    c. Prepare and file the Application for Temporary Employment Certification (Form ETA-9142B and all necessary appendices) with the DOL.
    d. Assist Client with required recruitment efforts as mandated by DOL regulations.
    e. Upon certification by DOL, prepare and file the H-2B Petition (Form I-129, Petition for a Nonimmigrant Worker, with H Classification Supplement) with U.S. Citizenship and Immigration Services (USCIS).
    f. Communicate with DOL and USCIS regarding the status of the applications/petitions and respond to requests for evidence (RFEs) if necessary (additional fees may apply for complex RFEs).
    g. Provide guidance on consular processing procedures for beneficiaries located abroad or change of status procedures for eligible beneficiaries within the United States.
    h. Provide general advice regarding record-keeping and compliance post-approval.
`;

    const feesAndPaymentClause = `
2. FEES AND COSTS

    a. Legal Fee: Client agrees to pay Attorney a flat legal fee of United States Dollars $[LEGAL_FEE] for the Scope of Services outlined above. This fee does not include government filing fees or third-party costs.
    b. Filing Fees & Costs: Client shall be responsible for the direct payment of all government filing fees associated with the applications and petitions (e.g., USCIS Form I-129 fee, Fraud Prevention and Detection Fee, etc.). The current estimated government filing fees are approximately $[FILING_FEE], subject to change by the government. Client is also responsible for any costs associated with recruitment advertising, translation services, credential evaluations, or courier fees, which will be billed separately if incurred by Attorney on Client's behalf.
    c. Payment Terms: [PAYMENT_TERMS]
`;

    const standardOutro = `
3. ATTORNEY-CLIENT RELATIONSHIP

This Agreement constitutes the entire agreement between the parties. No attorney-client relationship is established until this Agreement is signed by both parties and any required retainer fee is received by Attorney.

4. DISCLAIMER

Attorney will use best professional efforts in representing Client; however, Attorney makes no promise or guarantee regarding the outcome of this matter. The approval of labor certifications and visa petitions rests solely within the discretion of the relevant government agencies (DOL, USCIS, Department of State).

5. GOVERNING LAW

This Agreement shall be governed by and construed in accordance with the laws of the State of [Your State], without regard to its conflict of laws principles.

IN WITNESS WHEREOF, the parties have executed this Agreement as of the date first written above.


CLIENT: [EMPLOYER_NAME]


By: ____________________________
   [CLIENT_FIRST_NAME] [CLIENT_LAST_NAME]
   Authorized Representative
   Email: [CLIENT_EMAIL]
   Date: _______________________


ATTORNEY: The Kershaw Law Firm P.C.


By: ____________________________
   [Attorney Name/Partner Name], Esq.
   Date: _______________________
`;

    // --- Helper: Format Currency ---
    function formatCurrency(value) {
        const number = parseFloat(value);
        if (isNaN(number)) {
            return '0.00'; // Or handle error/default appropriately
        }
        return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }


    // --- Event Listener for Form Submission (Generate Preview) ---
    if (generatorForm && generatePreviewBtn && previewPanel && previewArea) {
        generatorForm.addEventListener('submit', (event) => {
            event.preventDefault();
            console.log("Generate Preview triggered.");

            // Add subtle loading state
            generatePreviewBtn.disabled = true;
            generatePreviewBtn.innerHTML = 'ðŸ“„ Generating...'; // Update button text

            // Simulate processing delay
            setTimeout(() => {
                // --- 1. Read Form Data ---
                const formData = new FormData(generatorForm);
                const data = Object.fromEntries(formData.entries());

                // --- 2. Construct Document Text ---
                let documentText = standardIntro;
                documentText += (data.visaType === 'H2A') ? h2aClauses : h2bClauses;
                documentText += feesAndPaymentClause;
                documentText += standardOutro;

                // --- 3. Replace Placeholders ---
                const currentDateFormatted = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
                documentText = documentText.replace(/\[DATE\]/g, currentDateFormatted);
                documentText = documentText.replace(/\[EMPLOYER_NAME\]/g, data.employerName?.trim() || '[Employer Name]');
                documentText = documentText.replace(/\[LEGAL_FEE\]/g, formatCurrency(data.legalFee));
                documentText = documentText.replace(/\[FILING_FEE\]/g, data.filingFee ? formatCurrency(data.filingFee) : 'To Be Determined');
                documentText = documentText.replace(/\[PAYMENT_TERMS\]/g, data.paymentTerms?.trim() || 'Payment due upon execution of this Agreement unless otherwise specified in writing.'); // Improved default
                documentText = documentText.replace(/\[CLIENT_FIRST_NAME\]/g, data.clientFirstName?.trim() || '[First Name]');
                documentText = documentText.replace(/\[CLIENT_LAST_NAME\]/g, data.clientLastName?.trim() || '[Last Name]');
                documentText = documentText.replace(/\[CLIENT_EMAIL\]/g, data.clientEmail?.trim() || '[Client Email]');
                documentText = documentText.replace(/\[Your State\]/g, 'Your Law Firm State'); // Replace with your actual state
                documentText = documentText.replace(/\[Attorney Name\/Partner Name\]/g, 'Managing Attorney'); // Replace with actual attorney name


                // --- 4. Display Preview ---
                previewArea.textContent = documentText;
                previewPanel.style.display = 'flex'; // Use flex display

                // Reset button state
                generatePreviewBtn.disabled = false;
                generatePreviewBtn.innerHTML = 'ðŸ“„ Generate Preview';

                console.log("Document preview generated.");

                // Scroll to preview (optional, might be jarring)
                // previewPanel.scrollIntoView({ behavior: 'smooth', block: 'start' });

            }, 250); // Short delay to simulate work & allow UI update
        });
    } else {
        console.warn("DocuSign generator form elements not all found.");
    }

    // --- Event Listener for Send Email Button ---
    if (sendEmailBtn && previewArea) {
        sendEmailBtn.addEventListener('click', () => {
            const recipientEmail = document.getElementById('client-email')?.value?.trim();
            const documentContent = previewArea.textContent;

            if (!recipientEmail) { /* ... (validation as before) ... */ return; }
            if (!documentContent || documentContent.trim() === "") { /* ... (validation as before) ... */ return; }

            console.log(`Simulating sending document to: ${recipientEmail}`);

            // ** Placeholder for Backend Integration **
            // fetch('/api/send-docusign', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({
            //         recipientEmail: recipientEmail,
            //         clientName: `${document.getElementById('client-first-name')?.value} ${document.getElementById('client-last-name')?.value}`,
            //         // Send form data OR the generated text - backend decides how to use it
            //         formData: Object.fromEntries(new FormData(generatorForm).entries()),
            //         // documentText: documentContent // Less flexible than sending raw data
            //     })
            // })
            // .then(response => response.json())
            // .then(result => {
            //     if (result.success) {
            //         alert('Simulation: Email & DocuSign request sent successfully!');
            //         // Maybe update UI, clear form, etc.
            //     } else {
            //         alert(`Simulation Error: ${result.message}`);
            //     }
            // })
            // .catch(error => {
            //     console.error('Error sending request:', error);
            //     alert('Simulation: Failed to send request to backend.');
            // });

             // Simple alert for now
            sendEmailBtn.disabled = true;
            sendEmailBtn.textContent = 'ðŸ“§ Sending...';
            setTimeout(() => {
                 alert(`Simulation Complete: Email & DocuSign request would be sent to ${recipientEmail}.\n(Backend integration required).`);
                 sendEmailBtn.disabled = false;
                 sendEmailBtn.textContent = 'ðŸ“§ Send via Email';
            }, 1000); // Simulate network delay
        });
    }

    // Optional: PDF Download Button Logic (placeholder)
    if (downloadPdfBtn) {
        downloadPdfBtn.addEventListener('click', () => {
            alert("PDF download functionality requires a backend service or client-side library (like jsPDF) and is not implemented yet.");
            // Basic client-side text download (not a real PDF)
            // const blob = new Blob([previewArea.textContent], { type: 'text/plain' });
            // const link = document.createElement('a');
            // link.href = URL.createObjectURL(blob);
            // link.download = `Agreement_${document.getElementById('client-last-name')?.value || 'Client'}.txt`;
            // link.click();
            // URL.revokeObjectURL(link.href);
        });
    }


    console.log("DocuSign Generator Script Initialized (V2).");

}); // End DOMContentLoaded